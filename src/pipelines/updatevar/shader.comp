#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint max_row_index;
};

layout(set = 0, binding = 1) buffer AgregateVar {
    float[] agregate_var;
};

layout(set = 0, binding = 2) buffer Varience {
    float[] varience;
};

layout(set = 0, binding = 3) buffer AgregateMean {
    float[] agregate_mean;
};

layout(set = 1, binding = 0) buffer Mean {
    float[] mean;
};

layout(set = 1, binding = 1) buffer Sample {
    uint samples;
};

layout(set = 1, binding = 2) buffer Target {
    float[] target;
};

float get_element(uint index_of_row) {
    //AgregateVar:  row_size
    //Varience:     row_size
    //AgregateMean: row_size
    //Mean:         row_size
    float k = float(samples);
    float share = 1.0/k;
    float agregate_share = 1.0 - share;
    float squaremean = mean[index_of_row] * mean[index_of_row];
    float squareagregatemean = agregate_mean[index_of_row] * agregate_mean[index_of_row];
    float meanagregatemean = agregate_mean[index_of_row] * mean[index_of_row];
    float contribution = (1.0 + share)*squaremean + varience[index_of_row] + agregate_share*(squareagregatemean + meanagregatemean);
    //This is once again a biased estimator, but the sample number
    // would be much higher if I used total items intead of batches
    // to handle it properly and it should be good enough
    return agregate_share*agregate_var[index_of_row] + share*contribution;
}

void main() {
    uint index_of_row = gl_GlobalInvocationID.x;
    target[index_of_row] = get_element(index_of_row);
    //target: row_size
}
