#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint max_row_index;
    uint max_column_index;
};

layout(set = 0, binding = 1) buffer Matrix_A {
    float[] matrix_a;
};
layout(set = 0, binding = 2) buffer Matrix_B {
    float[] matrix_b;
};

layout(set = 0, binding = 3) buffer Target {
    float[] target;
};

float get_element(uint index_of_row, uint index_of_column) {
    //Matrix_a: row_size x column_size
    //Matrix_b: row_size x column_size

    return matrix_a[index_of_column * max_row_index + index_of_row] - matrix_b[index_of_column * max_row_index + index_of_row];
}

void main() {
    uint index_of_row = gl_GlobalInvocationID.x;
    uint index_of_column = gl_GlobalInvocationID.y;
    target[index_of_column * max_row_index + index_of_row] = get_element(index_of_row, index_of_column);
    //target: row_size x column_size
}
