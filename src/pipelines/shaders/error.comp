#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint output_size;
    uint batch_size;
};

layout(set = 0, binding = 1) buffer Loss {
    float[] loss;
};

layout(set = 0, binding = 2) buffer Target {
    float[] target;
};

float square(float x) {
    return x * x;
}

float example_error(uint index_of_loss_vector) {
    float accumulator = 0.0;
    //loss: _output_size, _batch_size
    for(uint index_in_loss_vector = 0; index_in_loss_vector < output_size; index_in_loss_vector++) {
        accumulator += 0.5 * square(loss[index_of_loss_vector * output_size + index_in_loss_vector]);
    }
    return accumulator;
}

float average_batch_error() {
    float batch_size_float = float(batch_size);
    float accumulator = 0.0;
    //example_error: _batch_size
    for(uint index_of_example = 0; index_of_example < batch_size; index_of_example++) {
        accumulator += example_error(index_of_example);
    }
    return accumulator/batch_size_float;
}

void main() {
    target[0] = average_batch_error();
    //Target: scalar
}
