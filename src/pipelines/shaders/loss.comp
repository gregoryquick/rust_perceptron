#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint output_size;
    uint batch_size;
};

layout(set = 0, binding = 1) buffer PredictedValue {
    float[] prediction;
};

layout(set = 0, binding = 2) buffer ActualValue {
    float[] actual;
};

layout(set = 0, binding = 3) buffer Target {
    float[] target;
};

float difference(uint index_of_output_vector, uint index_in_output_vector) {
    //prediction: _output_size, _batch_size
    //actual: _output_size, _batch_size
    return prediction[index_of_output_vector * output_size + index_in_output_vector] - actual[index_of_output_vector * output_size + index_in_output_vector];
}

void main() {
    uint index_of_output_vector = gl_GlobalInvocationID.x;
    //Number of output_vectors is batch_size
    uint index_in_output_vector = gl_GlobalInvocationID.y;
    //size of output_vectors is output_size
    target[index_of_output_vector * output_size + index_in_output_vector] = difference(index_of_output_vector, index_in_output_vector);
    //Target: _output_size, _batch_size
}
