#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint input_size;
    uint output_size;
    uint batch_size;
};

layout(set = 0, binding = 1) buffer NetworkWeights {
    float[] network_weights;
};

layout(set = 0, binding = 2) buffer InputVector {
    float[] input_vector;
};

layout(set = 0, binding = 3) buffer Target {
    float[] target;
};

float dotProduct(uint index_column, uint index_batch) {
    float accumulator = 0;
    for(uint contracted_index = 0; contracted_index < input_size; contracted_index++){
        accumulator += network_weights[contracted_index * output_size + index_column] * input_vector[index_batch * input_size + contracted_index];
    }
    return accumulator;
}

void main() {
    uint collumn_index = gl_GlobalInvocationID.x;
    uint batch_index = gl_GlobalInvocationID.y;
    target[batch_index * output_size +  collumn_index] = dotProduct(collumn_index, batch_index);
}
