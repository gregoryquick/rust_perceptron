#version 450
layout(set = 0, binding = 0) uniform K {
    uint k;
};

layout(set = 0, binding = 1) buffer NetworkWeights {
    float[] network_weights;
};

layout(set = 0, binding = 2) buffer InputVector {
    float[] input_vector;
};

layout(set = 0, binding = 3) buffer Target {
    float[] target;
};

float dotProduct(uint index_value) {
    float accumulator = 0;
    for(uint i = 0; i < k; i++){
        accumulator += network_weights[index_value*k + i] * input_vector[i];
    }
    return accumulator;
}

float Lrelu(float x) {
    return (x > 0.0) ? x : 0.1 * x;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    target[index] = Lrelu(dotProduct(index));
}
