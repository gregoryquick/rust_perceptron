#version 450
layout(set = 0, binding = 0) uniform UniformBuffer {
    uint input_size;
    uint output_size;
    uint batch_size;
};

layout(set = 0, binding = 1) buffer NetworkWeights {
    float[] network_weights;
};

layout(set = 0, binding = 2) buffer InputVector {
    float[] input_vector;
};

layout(set = 0, binding = 3) buffer Target {
    float[] target;
};

float dotProduct(uint x_index ,uint y_index) {
    float accumulator = 0;
    for(uint k = 0; k < input_size; k++){
        accumulator += network_weights[k * output_size + x_index] * input_vector[y_index * input_size + k];
    }
    return accumulator;
}

float Lrelu(float x) {
    return (x > 0.0) ? x : 0.1 * x;
}

void main() {
    uint index_x = gl_GlobalInvocationID.x;
    uint index_y = gl_GlobalInvocationID.y;
    target[index_y * output_size +  index_x] = Lrelu(dotProduct(index_x, index_y));
}
